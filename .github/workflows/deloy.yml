name: LearnKing CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Docker Compose (v2)
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image(s)
        env:
          DOCKER_BUILDKIT: 1
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DB_CONNECTION_STRING: ${{ secrets.DB_CONNECTION_STRING }}
        run: |
          # Build images (docker-compose must exist at repo root or adjust path)
          docker-compose -f docker-compose.yml build --build-arg BUILDKIT_INLINE_CACHE=1
          # Push image(s) defined in docker-compose (here backend service name: backend)
          docker-compose -f docker-compose.yml push backend

      - name: Deploy to production server via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            set -e
            cd /home/${{ secrets.SERVER_USER }}/LearnKing || mkdir -p /home/${{ secrets.SERVER_USER }}/LearnKing && cd /home/${{ secrets.SERVER_USER }}/LearnKing

            # Write docker-compose file from secret
            echo "${{ secrets.DOCKER_COMPOSE_FILE }}" > docker-compose.yml

            # Validate compose
            docker-compose config || (echo "Docker Compose file invalid"; docker-compose config; exit 1)

            # Login Docker Hub
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

            # Pull latest images
            docker-compose pull

            # Stop & remove old container (use correct name)
            docker ps -a --filter "name=learnking-backend-net" --format '{{.ID}}' | xargs -r docker stop || true
            docker ps -a --filter "name=learnking-backend-net" --format '{{.ID}}' | xargs -r docker rm || true

            # Start new containers
            docker-compose up -d

            # Cleanup unused images
            docker image prune -f

            # Wait until containers are up (max 60s)
            timeout 60 bash -c 'until docker-compose ps | grep "Up"; do echo "Waiting..."; sleep 3; done' || (docker-compose logs --tail=50; exit 1)

      - name: Cleanup runner
        if: always()
        run: |
          docker logout || true
          rm -rf /tmp/.buildx-cache || true
